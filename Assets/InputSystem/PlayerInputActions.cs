//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/InputSystem/PlayerInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputActions"",
    ""maps"": [
        {
            ""name"": ""BaseAttacks"",
            ""id"": ""caad7b8d-e1ce-4794-b1fd-7a97c3a729c5"",
            ""actions"": [
                {
                    ""name"": ""Punch"",
                    ""type"": ""Button"",
                    ""id"": ""fbe7a560-777b-49d5-97da-7413b9d96b3a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""1d1ac570-a4fa-4d77-ad0c-bf7d568b4df2"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Punch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // BaseAttacks
        m_BaseAttacks = asset.FindActionMap("BaseAttacks", throwIfNotFound: true);
        m_BaseAttacks_Punch = m_BaseAttacks.FindAction("Punch", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // BaseAttacks
    private readonly InputActionMap m_BaseAttacks;
    private List<IBaseAttacksActions> m_BaseAttacksActionsCallbackInterfaces = new List<IBaseAttacksActions>();
    private readonly InputAction m_BaseAttacks_Punch;
    public struct BaseAttacksActions
    {
        private @PlayerInputActions m_Wrapper;
        public BaseAttacksActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Punch => m_Wrapper.m_BaseAttacks_Punch;
        public InputActionMap Get() { return m_Wrapper.m_BaseAttacks; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(BaseAttacksActions set) { return set.Get(); }
        public void AddCallbacks(IBaseAttacksActions instance)
        {
            if (instance == null || m_Wrapper.m_BaseAttacksActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_BaseAttacksActionsCallbackInterfaces.Add(instance);
            @Punch.started += instance.OnPunch;
            @Punch.performed += instance.OnPunch;
            @Punch.canceled += instance.OnPunch;
        }

        private void UnregisterCallbacks(IBaseAttacksActions instance)
        {
            @Punch.started -= instance.OnPunch;
            @Punch.performed -= instance.OnPunch;
            @Punch.canceled -= instance.OnPunch;
        }

        public void RemoveCallbacks(IBaseAttacksActions instance)
        {
            if (m_Wrapper.m_BaseAttacksActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IBaseAttacksActions instance)
        {
            foreach (var item in m_Wrapper.m_BaseAttacksActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_BaseAttacksActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public BaseAttacksActions @BaseAttacks => new BaseAttacksActions(this);
    public interface IBaseAttacksActions
    {
        void OnPunch(InputAction.CallbackContext context);
    }
}
